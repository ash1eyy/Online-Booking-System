# Generated by Django 5.0.1 on 2024-02-11 17:05

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announceTitle', models.CharField(max_length=100)),
                ('announceDate', models.DateField()),
                ('announceDesc', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resourceName', models.CharField(max_length=100)),
                ('uploadedBy', models.CharField(max_length=20)),
                ('resourceType', models.CharField(max_length=20)),
                ('resourceDesc', models.CharField(max_length=20)),
                ('resourceImage', models.ImageField(null=True, upload_to='resource_images/')),
                ('uploadDate', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reportedBy', models.CharField(max_length=20)),
                ('reportTitle', models.CharField(max_length=100)),
                ('reportDate', models.DateField()),
                ('incidentDate', models.DateField()),
                ('reportDesc', models.CharField(max_length=1000)),
                ('affectedResource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.resource')),
            ],
        ),
        migrations.CreateModel(
            name='LeasingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leasedBy', models.CharField(max_length=20)),
                ('startDate', models.DateField()),
                ('endDate', models.DateField()),
                ('requestDate', models.DateField()),
                ('requestDesc', models.CharField(max_length=1000)),
                ('requestStatus', models.BooleanField(null=True)),
                ('amountPaid', models.PositiveBigIntegerField()),
                ('resourceLeased', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.resource')),
            ],
            options={
                'verbose_name': 'Leasing Request',
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unitNumber', models.CharField(max_length=7)),
                ('leasingRequests', models.ManyToManyField(to='MainApp.leasingrequest')),
                ('reports', models.ManyToManyField(to='MainApp.report')),
            ],
            options={
                'verbose_name': 'Tenant',
            },
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resources', models.ManyToManyField(to='MainApp.resource')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='related_user', to='MainApp.tenant')),
            ],
            options={
                'verbose_name': 'Owner',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('firstname', models.CharField(max_length=20)),
                ('lastname', models.CharField(max_length=20)),
                ('password', models.CharField(max_length=100)),
                ('gender', models.CharField(blank=True, choices=[('M', 'M'), ('F', 'F')], max_length=1, null=True)),
                ('birthDate', models.DateField(blank=True, null=True)),
                ('icNumber', models.CharField(blank=True, max_length=12, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('profilePic', models.ImageField(default='profile_pics/default.jpg', upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('owner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_owner', to='MainApp.owner')),
                ('tenant', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_tenant', to='MainApp.tenant')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
